<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>前端笔记-YiJio</title><subtitle>前端笔记记录，学习心得，javascript，node，webpack，electron，css，vue，vite，共同成长进步！</subtitle> <updated>2022-08-16T18:10:54+08:00</updated> <author> <name>Yijio</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 Yijio </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>前端开发编码习惯</title><link href="/posts/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%BC%96%E7%A0%81%E4%B9%A0%E6%83%AF/" rel="alternate" type="text/html" title="前端开发编码习惯" /><published>2022-05-13T00:00:00+08:00</published> <updated>2022-07-11T15:43:12+08:00</updated> <id>/posts/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%BC%96%E7%A0%81%E4%B9%A0%E6%83%AF/</id> <content src="/posts/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E7%BC%96%E7%A0%81%E4%B9%A0%E6%83%AF/" /> <author> <name>Yijio</name> </author> <category term="开发" /> <summary> 前言 好的编码习惯，能够提升个人技术素养，产品质量，减少bug数量，易维护，易迭代，多人协作易沟通交接等多个好处。今天从个人角度谈谈自己的一些编码习惯，以及为什么要这么做。 这并不是什么技术标准，不同的人有不同的看法和喜好。 但我们要牢记一条：优秀的代码一定是可读性非常高的代码。 基础篇 主要从javascript代码的基础编写的角度阐述。 ===与== 在遇到基本数据类型判断的情况下,强制使用全等于判断===。因为js是是弱类型语言，非全等判断==会存在隐式类型转换的问题，在一个复杂的业务场景中，如果导出充斥着非全等判断，那么开发者可能会无法第一时间明确业务中过的数据类型及结构，对后来的协作开发人员也非常不友好。而在其他大部分编程语言中，包括近年火热的Typescript本身也是有解决这一问题。 所以在我们开发中遇到当前场景，务必使用全等判断，如果数据类型不明确，我们也... </summary> </entry> <entry><title>vue3甘特图组件</title><link href="/posts/vue3%E7%94%98%E7%89%B9%E5%9B%BE/" rel="alternate" type="text/html" title="vue3甘特图组件" /><published>2022-03-30T00:00:00+08:00</published> <updated>2022-07-11T15:43:12+08:00</updated> <id>/posts/vue3%E7%94%98%E7%89%B9%E5%9B%BE/</id> <content src="/posts/vue3%E7%94%98%E7%89%B9%E5%9B%BE/" /> <author> <name>Yijio</name> </author> <category term="学习笔记" /> <summary> 基于vue3的极简甘特图组建,支持日程重叠，覆盖，重叠提取自定义展示。 基于vue3.x开发的精简版甘特图，支持重叠日程展示，支持导出gantt img和gantt Excel文件。 vue3-gantt 参考链接 Demo在线预览 使用方式 &amp;lt;Gantt :data="data" itemText="项目" dateText="日期" :dateRangeList="dateRangeList" /&amp;gt; import { ref } from 'vue' import Gantt from 'vue3-gantt' const dateRangeList = ref(['2022-01-01', '2022-03-05']) const data = ref([ { type: 'normal', c... </summary> </entry> <entry><title>白鹭引擎学习笔记</title><link href="/posts/%E7%99%BD%E9%B9%AD%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" rel="alternate" type="text/html" title="白鹭引擎学习笔记" /><published>2022-03-04T00:00:00+08:00</published> <updated>2022-03-04T17:24:11+08:00</updated> <id>/posts/%E7%99%BD%E9%B9%AD%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id> <content src="/posts/%E7%99%BD%E9%B9%AD%E5%BC%95%E6%93%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" /> <author> <name>Yijio</name> </author> <category term="学习笔记" /> <summary> 背景  初学白鹭引擎游戏开发，记录一下学习过程中的知识点 色值 大多数设置颜色的API接口接收参数为16进制格式的Number,其实支持16进制转为10进制格式的Number 音频 获取预加载的音频文件使用RES.getRes()方法，返回egret.Sound 对象，操作该对象play方法可以进行播放，play方法返回一个egret.SoundChannel对象，该对象可以设置音量，进度，停止播放 删除元素 如果准确知道元素父级，可以直接调用父级removeChild方法，传入要删除的对象即可 如果不知道父级可以通过元素parent属性获取父级 删除父级下所有元素使用removeChildren方法 绑定事件 键盘事件直接绑定在document上 元素移动 部分场景可以使用Tween缓动动画，增加流畅性 碰撞检测 public hitTest(obj1:e... </summary> </entry> <entry><title>前端模拟帧动画实现【FaCode】</title><link href="/posts/%E5%89%8D%E7%AB%AF%E6%A8%A1%E6%8B%9F%E5%B8%A7%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0/" rel="alternate" type="text/html" title="前端模拟帧动画实现【FaCode】" /><published>2022-02-23T00:00:00+08:00</published> <updated>2022-02-23T00:00:00+08:00</updated> <id>/posts/%E5%89%8D%E7%AB%AF%E6%A8%A1%E6%8B%9F%E5%B8%A7%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0/</id> <content src="/posts/%E5%89%8D%E7%AB%AF%E6%A8%A1%E6%8B%9F%E5%B8%A7%E5%8A%A8%E7%94%BB%E5%AE%9E%E7%8E%B0/" /> <author> <name>Yijio</name> </author> <category term="学习笔记" /> <summary> 背景 在一次需求中，产品需要在页面中展示一个动图效果。心里直接习惯性的让设计将图片做成gif格式,然后才发现，gif格式的图片在一张图中最颜色数不能超过256，所以在需求特效图片上拥有极其丰富的色彩的情况下，gif格式的图片方案显然不行了。 于是决定动手亲自实现这个效果且用以后期复用，由于图片色彩较多，所以就只能将特效动画图片切成几十张连续的图片，然后通过代码实现动画切换，以达到最终效果。 实现方案 css 使用animation 实现图片切换 js 使用setInterval 实现图片切换 canvas 使用canvas实现图片切换 方案优劣对比 角度 CSS JS CANVAS 性能 优 低 优 ... </summary> </entry> <entry><title>【webpack插件】insert-webpack-plugin</title><link href="/posts/webpack%E6%8F%92%E4%BB%B6%E5%AD%A6%E4%B9%A0/" rel="alternate" type="text/html" title="【webpack插件】insert-webpack-plugin" /><published>2022-02-14T00:00:00+08:00</published> <updated>2022-02-24T10:42:22+08:00</updated> <id>/posts/webpack%E6%8F%92%E4%BB%B6%E5%AD%A6%E4%B9%A0/</id> <content src="/posts/webpack%E6%8F%92%E4%BB%B6%E5%AD%A6%E4%B9%A0/" /> <author> <name>Yijio</name> </author> <category term="学习笔记" /> <summary> 背景 我们做的前端项目打包后的文件要上传到第三方服务器，服务器会对代码进行校验，如果代码中包含不符合第三方规范的代码，将会上传失败。比如，不允许有ES6+的代码。 正常情况下我们是可以通过babel来处理这一问题的，可是我们的项目是基于vue3的,本身就包含了无法polyfill的Proxy这一核心Function。 好在第三方服务器提供了跳过es6检查的方法，那就是在需要跳过es6检查的文件顶部加上一段特定的注释 /* AUTHORIZATION SKIP ES6 */ 由于打包后的js文件较多，手动修改及其不友好，影响开发体验，所以我们可以通过webpack插件来处理打包后的js文件，给指定文件添加内容。这是一个webpack中插件比较基础的功能，但是没有看到有类似的将这一功能完善的插件，或者只是处理html的。所以这里开发了一个可以处理任意类型文件的插件 主要是确... </summary> </entry> </feed>
